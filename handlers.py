import datetime
from aiogram import Router, types, F
from db_utils import *

router = Router()

@router.message(F.text == "/start")
async def start(message: types.Message):
    
    await add_user(message.from_user.id, message.from_user.username, message.from_user.full_name)
    welcome_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫.\n\n"
        "üìå –í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n"
        "‚ûñ `/list` ‚Äì –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        "‚ûñ `/stats` ‚Äì –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "‚ûñ `/help` ‚Äì –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å\n\n"
        "üí¨ –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –º–Ω–µ –≤–æ–ø—Ä–æ—Å—ã, –∏ —è –æ—Ç–≤–µ—á—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!"
    )
    await message.answer(welcome_text)

@router.message(F.text == "/list")
async def list_commands(message: types.Message):
    
    command_list = (
        "üìã **–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:**\n"
        "‚ûñ `/start` ‚Äì –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "‚ûñ `/list` ‚Äì –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        "‚ûñ `/stats` ‚Äì –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "‚ûñ `/help` ‚Äì –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å\n"
        "‚ûñ `/broadcast` ‚Äì (–ê–¥–º–∏–Ω) –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30)\n\n"
        "ü§ñ **–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã:**\n"
        "üü¢ *–ï—Å–ª–∏ –≤ –≤–∞—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –µ—Å—Ç—å —Å–ª–æ–≤–∞:*\n"
        "    üîπ `—Ü–µ–Ω–∞`, `price` ‚Üí –Ø —Ä–∞—Å—Å–∫–∞–∂—É –æ –Ω–∞—à–∏—Ö —Ü–µ–Ω–∞—Ö üí∞\n"
        "    üîπ `–ø–æ–¥–¥–µ—Ä–∂–∫–∞`, `help`, `support` ‚Üí –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º üÜò\n"
        "    üîπ `–∫–æ–Ω—Ç–∞–∫—Ç—ã`, `contact`, `email` ‚Üí –Ø –ø–æ–¥—Å–∫–∞–∂—É, –∫–∞–∫ –Ω–∞—Å –Ω–∞–π—Ç–∏ üìû\n"
        "    üîπ `—Ä–∞–±–æ—Ç–∞`, `vacancy`, `job` ‚Üí –Ø —Ä–∞—Å—Å–∫–∞–∂—É –ø—Ä–æ –≤–∞–∫–∞–Ω—Å–∏–∏ üë®‚Äçüíª\n"
        "    üîπ `–æ—Ç–∑—ã–≤—ã`, `review`, `feedback` ‚Üí –Ø –ø–æ–∫–∞–∂—É –æ—Ç–∑—ã–≤—ã –∫–ª–∏–µ–Ω—Ç–æ–≤ ‚≠ê"
    )
    await message.answer(command_list, parse_mode="Markdown")

@router.message(F.text == "/help")
async def help_command(message: types.Message):
    
    help_text = (
        "üÜò **–ü–æ–º–æ—â—å** üÜò\n\n"
        "üîπ *–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç?*\n"
        "   –Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–≤–µ—á–∞—é –Ω–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–º–æ–≥–∞—é –≤–∞–º –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.\n\n"
        "üîπ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "   ‚ûñ `/start` ‚Äì –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "   ‚ûñ `/list` ‚Äì –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        "   ‚ûñ `/stats` ‚Äì –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "   ‚ûñ `/help` ‚Äì –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å\n"
        "   ‚ûñ `/broadcast` ‚Äì (–ê–¥–º–∏–Ω) –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30)\n\n"
        "üîπ *–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:*\n"
        "   - –ï—Å–ª–∏ –≤—ã –Ω–∞–ø–∏—à–µ—Ç–µ `—Ü–µ–Ω–∞` –∏–ª–∏ `price`, —è —Ä–∞—Å—Å–∫–∞–∂—É –æ –Ω–∞—à–∏—Ö —Ü–µ–Ω–∞—Ö üí∞\n"
        "   - –ï—Å–ª–∏ –≤—ã –Ω–∞–ø–∏—à–µ—Ç–µ `–ø–æ–¥–¥–µ—Ä–∂–∫–∞`, `help`, `support`, —è –ø–æ–¥—Å–∫–∞–∂—É –∫–æ–Ω—Ç–∞–∫—Ç—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ üÜò\n"
        "   - –ï—Å–ª–∏ –≤—ã –Ω–∞–ø–∏—à–µ—Ç–µ `–∫–æ–Ω—Ç–∞–∫—Ç—ã`, `contact`, `email`, —è –¥–∞–º –≤–∞–º —Ç–µ–ª–µ—Ñ–æ–Ω üìû\n"
        "   - –ï—Å–ª–∏ –≤—ã –Ω–∞–ø–∏—à–µ—Ç–µ `—Ä–∞–±–æ—Ç–∞`, `vacancy`, `job`, —è —Ä–∞—Å—Å–∫–∞–∂—É –æ –≤–∞–∫–∞–Ω—Å–∏—è—Ö üë®‚Äçüíª\n"
        "   - –ï—Å–ª–∏ –≤—ã –Ω–∞–ø–∏—à–µ—Ç–µ `–æ—Ç–∑—ã–≤—ã`, `review`, `feedback`, —è –ø–æ–∫–∞–∂—É –æ—Ç–∑—ã–≤—ã –∫–ª–∏–µ–Ω—Ç–æ–≤ ‚≠ê\n\n"
        "üîπ *–ö–∞–∫ —Å–≤—è–∑–∞—Ç—å—Å—è —Å —á–µ–ª–æ–≤–µ–∫–æ–º?*\n"
        "   –ù–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ `–ø–æ–¥–¥–µ—Ä–∂–∫–∞`, –∏ —è –ø–æ–¥—Å–∫–∞–∂—É –∫–æ–Ω—Ç–∞–∫—Ç—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤."
    )
    await message.answer(help_text, parse_mode="Markdown")

@router.message(F.text == "/stats")
async def stats(message: types.Message):
    count = await get_user_count()
    await message.answer(f"üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {count}")

@router.message(F.text.startswith("/broadcast"))
async def schedule_broadcast(message: types.Message):
    
    args = message.text.split(" ", 2)
    
    if len(args) < 3:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/broadcast HH:MM —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏`")
        return
    
    try:
        time_str = args[1]
        text = args[2]
        broadcast_time = datetime.datetime.strptime(time_str, "%H:%M").time()
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30)")
        return

    now = datetime.datetime.now()
    scheduled_time = datetime.datetime.combine(now.date(), broadcast_time)

    if scheduled_time < now:
        scheduled_time += datetime.timedelta(days=1)

    # Store in DB
    await add_scheduled_broadcast(text, scheduled_time)

    await message.answer(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {scheduled_time.strftime('%H:%M')}")

async def send_broadcast(bot, chat_ids, text):
    for chat_id in chat_ids:
        try:
            await bot.send_message(chat_id, text)
        except Exception as e:
            print(f"Failed to send message to {chat_id}: {e}")

async def process_scheduled_broadcasts(bot):
    while True:
        broadcasts = await get_scheduled_broadcasts()
        now = datetime.datetime.now()
        
        for broadcast in broadcasts:
            broadcast_id = broadcast["id"]
            message_text = broadcast["message"]
            scheduled_time = broadcast["scheduled_time"]

            if scheduled_time <= now:
                chat_ids = await get_all_users()
                await send_broadcast(bot, chat_ids, message_text)
                await mark_broadcast_as_sent(broadcast_id)
        
        await asyncio.sleep(0.5)

# –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
@router.message(F.text.lower().contains("—Ü–µ–Ω–∞") |
                F.text.lower().contains("price"))
async def price_info(message: types.Message):
    await message.answer("üí∞ –ù–∞—à–∏ —É—Å–ª—É–≥–∏ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –æ—Ç $100. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.")

@router.message(F.text.lower().contains("–ø–æ–¥–¥–µ—Ä–∂–∫–∞") |
                F.text.lower().contains("help") |
                F.text.lower().contains("support"))
async def support_info(message: types.Message):
    await message.answer("üÜò –ù–∞—à–∞ —Å–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ 24/7. –ù–∞–ø–∏—à–∏—Ç–µ @support.")

@router.message(F.text.lower().contains("–∫–æ–Ω—Ç–∞–∫—Ç—ã") |
                F.text.lower().contains("contact") |
                F.text.lower().contains("email"))
async def contact_info(message: types.Message):
    await message.answer("üìû –ù–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω: +1 (234) 567-89-00\nüìç –ê–¥—Ä–µ—Å: –ú–æ—Å–∫–≤–∞, —É–ª. –ü–æ–ª–∏–Ω—ã –û—Å–∏–ø–µ–Ω–∫–æ, 1")

@router.message(F.text.lower().contains("—Ä–∞–±–æ—Ç–∞") |
                F.text.lower().contains("vacancy") |
                F.text.lower().contains("job"))
async def job_info(message: types.Message):
    await message.answer("üë®‚Äçüíª –£ –Ω–∞—Å –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏! –ù–∞–ø–∏—à–∏—Ç–µ @HR_manager.")

@router.message(F.text.lower().contains("–æ—Ç–∑—ã–≤—ã") |
                F.text.lower().contains("review") |
                F.text.lower().contains("feedback"))
async def reviews_info(message: types.Message):
    await message.answer("‚≠ê –ù–∞—à–∏ –∫–ª–∏–µ–Ω—Ç—ã –æ—Å—Ç–∞–≤–ª—è—é—Ç –æ—Ç–∑—ã–≤—ã –Ω–∞ —Å–∞–π—Ç–µ: https://example.com/reviews")
